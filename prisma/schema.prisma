// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int     @id @default(autoincrement())
  username  String  @unique
  password  String
  email     String  @unique
  superuser Boolean
  cart      Cart?
  Order     Order[]
}

model Product {
  // additonal model required for individual products skipping for now
  id             Int              @id @default(autoincrement())
  name           String
  image          String
  description    String
  price          Int
  CartProductMap CartProductMap[]
}

// Need an other table to map all the cart products to the Order when placed(No cascade)
model Order {
  id            Int      @id @default(autoincrement())
  // create a type table for this later 
  status        String
  orderDate     DateTime @default(now())
  //create a type table for this later
  paymentMethod String
  price         Int
  userId        Int
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Coupon {
  id                 Int    @id @default(autoincrement())
  code               String @unique
  minCartValue       Int
  minOrders          Int
  discountPercentage Int
  Cart               Cart[]
}

model Cart {
  id             Int              @id @default(autoincrement())
  userId         Int              @unique
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  price          Int              @default(0)
  couponDiscount Int              @default(0)
  couponId       Int?
  coupon         Coupon?          @relation(fields: [couponId], references: [id], onDelete: Cascade)
  CartProductMap CartProductMap[]
}

model CartProductMap {
  id        Int     @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}
